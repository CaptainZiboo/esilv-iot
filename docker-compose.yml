version: '3'

services:
  reverse-proxy:
    image: traefik:latest
    command: 
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: password
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
    user: "472:472"
    volumes:
      - ./data/grafana:/var/lib/grafana
    networks:
      - default_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.docker.localhost`) && PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.entrypoints=web"

  mysql:
    image: mysql:latest
    restart: always
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: grafana
      MYSQL_USER: grafana
      MYSQL_PASSWORD: password
    volumes:
      - ./data/mysql:/var/lib/mysql
    networks:
      - default_network

  mqtt:
    image: eclipse-mosquitto:latest
    restart: always
    ports:
      - "1883:1883"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-p", "1883", "-t", "healthcheck", "-m", "OK"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ./data/mosquitto/config:/mosquitto/config
      - ./data/mosquitto/data:/mosquitto/data
      - ./data/mosquitto/log:/mosquitto/log
    networks:
      - default_network
    labels:
      - "traefik.http.routers.mqtt.rule=Host(`mqtt.docker.localhost`)"

  nodered:
    image: nodered/node-red:latest
    restart: always
    ports:
      - "1880:1880"
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:1880/"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./data/nodered:/data
    networks:
      - default_network
    labels:
      - "traefik.http.routers.nodered.rule=Host(`nodered.docker.localhost`)"

  mqttx:
    image: emqx/mqttx-web:latest
    restart: always
    ports:
      - "1885:1885"
    depends_on:
      mqtt:
        condition: service_healthy
    networks:
      - default_network
    labels:
      - "traefik.http.routers.mqttx.rule=Host(`mqttx.docker.localhost`)"
  
networks:
  default_network:
    driver: bridge
